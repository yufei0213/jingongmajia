apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

def configDir = "${project.rootDir}/config/quality"
def reportsDir = "${project.buildDir}/reports"

task checkstyle(type: Checkstyle) {

    ignoreFailures = false
    configFile file("$configDir/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("$configDir/checkstyle/checkstyle-suppressions.xml").absolutePath

    source 'src/main'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

task findbugs(type: FindBugs, dependsOn: 'assembleDebug') {

    ignoreFailures = false
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("$configDir/findbugs/findbugs-filter.xml")
    classes = files("${project.buildDir}/intermediates/classes")

    source 'src/main'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        xml {

            destination new File("$reportsDir/findbugs/findbugs.xml")
        }
        html {

            destination new File("$reportsDir/findbugs/findbugs.html")
        }
    }

    classpath = files()
}

task pmd(type: Pmd) {

    ignoreFailures = false
    ruleSetFiles = files("$configDir/pmd/pmd-ruleset.xml")
    ruleSets = []

    source 'src/main'
    include '**/*.java'
    exclude '**/gen/**'

    reports {

        xml.enabled = false
        html.enabled = true
        xml {

            destination new File("$reportsDir/pmd/pmd.xml")
        }
        html {

            destination new File("$reportsDir/pmd/pmd.html")
        }
    }
}

android {

    lintOptions {

        abortOnError true
        xmlReport false
        htmlReport true

        lintConfig file("$configDir/lint/lint.xml")
        htmlOutput file("$reportsDir/lint/lint-result.html")
        xmlOutput file("$reportsDir/lint/lint-result.xml")
    }
}